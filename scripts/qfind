#!/usr/bin/env bash

# Função para exibir a mensagem de ajuda
function show_help() {
	echo "Usage: qfind [-r|-p|-c|-h] [search_term]"
	echo ""
	echo "Options:"
	echo "  -r          Use 'rg' (ripgrep) for searching (default is 'fd' for file search)"
	echo "  -p          Searching root path"
    echo "  -c          Command to execute on selected file. Use 'select' to fuzzy find through available commands (default is content of $EDITOR variable.)"
	echo "  -h          Show this help message"
	echo ""
	echo "Arguments:"
	echo "  [search_term] Tag to search for (optional, prompted if not provided)"
	exit 0
}

# Variáveis padrão
SEARCH_TOOL="fd -E .git -t f -H -p --ignore-file ~/.config/qfind/ignore.list"
PREVIEW_COMMAND="bat --color=always {1}"
ROOT_PATH="$CONFIG_PATH $DOTFILES_PATH"
FZF_FLAGS="--tmux center,80%"
COMMAND=${COMMAND:-$EDITOR}

# Parse das flags
while getopts "rp:nc:h" opt; do
	case $opt in
	r)
		SEARCH_TOOL="rg --with-filename --line-number --column --smart-case --hidden --ignore-file ~/.config/qfind/ignore.list"
		PREVIEW_COMMAND="bat --color=always {1} --highlight-line {2}"
		;;
	p)
		ROOT_PATH=${OPTARG}
		;;
	c)
		# Recebe o primeiro argumento ou solicita a seleção ao usuário via fzf
		if [[ ${OPTARG} == 'select' ]]; then
			COMMAND=$(cat ~/.config/qfind/output_command.list | fzf)
		else
			COMMAND="${OPTARG}"
		fi
		;;
	n)
		FZF_FLAGS=""
		;;
	h)
		show_help
		;;
	*)
		show_help
		;;
	esac
done

# Remover as flags dos parâmetros passados
shift $((OPTIND - 1))

# Recebe o segundo argumento ou solicita a busca ao usuário
if [[ -z $1 ]]; then
	read -p "Search Query: " doc_tag
else
	doc_tag=$1
fi

# Execução do fzf com os comandos configurados
fzf --ansi --disabled ${FZF_FLAGS} --query "$doc_tag" \
	--reverse \
	--bind "start:reload:$SEARCH_TOOL '{q}' $ROOT_PATH" \
	--bind "change:reload:sleep 0.1; $SEARCH_TOOL '{q}' $ROOT_PATH || true" \
	--delimiter : \
	--preview "$PREVIEW_COMMAND" \
	--preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \
	--bind "enter:become($COMMAND {1})"
